/* Brian Huynh 57641580
 *
 * void detect_edges(int height_start, int height_end, int input[MAX_PIXELS][MAX_PIXELS], int output[MAX_PIXELS][MAX_PIXELS]) {
 *
 * Implement serial Sobel Filter Algorithm.
 *
 * }
 *
 * bool is_computed[maxChunk];
 *
 * Initialize the is_computed array to keep track of image sections that have already been filtered.
 * for (int i = 0; i < maxChunk; ++i) {
 *      is_computed[i] = false;
 * }
 * 
 * If every chunk of the image has been computed, return true; otherwise false.
 * bool all_computed(bool is_computed[], int length) {
 *      for (int i = 0; i < length; ++i) {
 *          if (!is_computed[i])
 *              return false;
 *      }
 *      return true;
 * }
 *
 * Function that std::thread() calls.
 * void start(int maxChunk, int start_indices, int end_indices[]) {
 *      int index = -1;
 *      mtx.lock();
 *      for (int i = 0; i < maxChunk; ++i) {
 *          if (!is_computed[i]) {
 *              index = i;
 *              is_computed[i] = true;
 *              break;
 *          }
 *      }
 *      mtx.unlock();
 *      
 *      This part will run concurrently because each thread will work within a different range of indices on the same image.
 *      if (index != -1)
 *          detect_edges(start_indices[index], end_indices[index], inputImage, outputImage);
 * }
 *
 * Function that main() calls.
 * void dispatch_threads(int num_threads, int maxChunk, int start_indices[], int end_indices[]) {
 *      std::vector<std::thread> threads;
 *      
 *      while (!all_computed(is_computed, maxChunk)) {
 *          Creating a new batch of threads.
 *          for (int i = 0; i < num_threads; ++i) {
 *              threads.push_back(std::thread(start, maxChunk, start_indices, end_indices));
 *          }
 *
 *          Wait for all currently running threads to complete.
 *          for (int i = 0; i < num_threads; ++i) {
 *              threads[i].join();
 *          }
 *
 *          Deleting the batch of threads.
 *          threads.clear();
 *      }
 * }
 *
 * Initialize the array of start_indices and end_indices.
 * void init_indices(int image_height, int maxChunk, int chunkSize, int start_indices[], int end_indices[]) {
 *      If image_height = 360, chunkSize = 100 and maxChunk = 4, then the output arrays are
 *      start_indices = [0, 100, 200, 300]
 *      end_indices = [100, 200, 300, 360].
 * }
 * 
 *
 * int main() {
 *      dispatch_threads(num_threads, maxChunk, start_indices, end_indices);
 *      return 0;
 * }
 * 
 */
